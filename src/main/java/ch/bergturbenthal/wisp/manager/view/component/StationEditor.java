package ch.bergturbenthal.wisp.manager.view.component;

import java.net.InetAddress;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import ch.bergturbenthal.wisp.manager.model.Connection;
import ch.bergturbenthal.wisp.manager.model.NetworkDevice;
import ch.bergturbenthal.wisp.manager.model.RangePair;
import ch.bergturbenthal.wisp.manager.model.Station;
import ch.bergturbenthal.wisp.manager.model.VLan;
import ch.bergturbenthal.wisp.manager.model.devices.NetworkDeviceModel;
import ch.bergturbenthal.wisp.manager.service.NetworkDeviceManagementService;
import ch.bergturbenthal.wisp.manager.util.CrudItem;
import ch.bergturbenthal.wisp.manager.util.CrudRepositoryContainer;
import ch.bergturbenthal.wisp.manager.util.CrudRepositoryContainer.PojoFilter;

import com.vaadin.data.Item;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.VerticalLayout;

@Component
public class StationEditor extends CustomComponent implements ItemEditor<Station> {

	private NetworkDevice currentNetworkDevice;
	private CrudRepositoryContainer<NetworkDevice, Long> devicesContainer;
	private FieldGroup fieldGroup;
	private FormLayout mainLayout;
	@Autowired
	private NetworkDeviceManagementService networkDeviceManagementService;
	private Button provisionButton;

	/**
	 * The constructor should first build the main layout, set the composition root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual editor.
	 */
	public StationEditor() {
	}

	private Object getAddressFromVlanItem(final Table source, final Object itemId, final boolean v6Address) {
		final BeanItem<VLan> item = (BeanItem<VLan>) source.getContainerDataSource().getItem(itemId);
		final VLan bean = item.getBean();
		if (bean == null) {
			return null;
		}
		final RangePair address = bean.getAddress();
		if (address == null) {
			return null;
		}
		final InetAddress inetAddress = v6Address ? address.getInet6Address() : address.getInet4Address();
		if (inetAddress == null) {
			return null;
		}
		return inetAddress.getHostAddress() + "/" + (v6Address ? address.getInet6Mask() : address.getInet4Mask());
	}

	@Override
	@SuppressWarnings("unchecked")
	public CrudItem<Station> getCurrentItem() {
		final Item itemDataSource = fieldGroup.getItemDataSource();
		if (itemDataSource instanceof CrudItem) {
			return (CrudItem<Station>) itemDataSource;
		}
		return null;
	}

	@PostConstruct
	public void init() {
		devicesContainer = networkDeviceManagementService.createContainerRepository();
		fieldGroup = new FieldGroup(new BeanItem<Station>(new Station()));
		fieldGroup.setFieldFactory(new CustomFieldFactory(devicesContainer));
		fieldGroup.setBuffered(false);
		mainLayout = new FormLayout();
		mainLayout.setSizeFull();
		setSizeFull();
		mainLayout.addComponent(fieldGroup.buildAndBind("name"));
		mainLayout.addComponent(fieldGroup.buildAndBind("device"));
		mainLayout.addComponent(fieldGroup.buildAndBind("loopbackDescription"));
		final Table connectionTable = new ListPropertyTable<>(Connection.class);
		connectionTable.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		connectionTable.setPageLength(0);
		connectionTable.setVisibleColumns("title");
		// for (final Object column : connectionTable.getVisibleColumns()) {
		// connectionTable.setColumnExpandRatio(column, 1);
		// }
		connectionTable.setSizeFull();
		connectionTable.setCaption("Connections");
		fieldGroup.bind(connectionTable, "connections");
		mainLayout.addComponent(connectionTable);

		final Table vlanTable = new ListPropertyTable<>(VLan.class);
		vlanTable.setPageLength(0);
		vlanTable.setSizeFull();
		vlanTable.setCaption("networks");
		vlanTable.addGeneratedColumn("v4Address", new ColumnGenerator() {

			@Override
			public Object generateCell(final Table source, final Object itemId, final Object columnId) {
				return getAddressFromVlanItem(source, itemId, false);
			}
		});
		vlanTable.addGeneratedColumn("v6Address", new ColumnGenerator() {

			@Override
			public Object generateCell(final Table source, final Object itemId, final Object columnId) {
				return getAddressFromVlanItem(source, itemId, true);
			}
		});
		vlanTable.setVisibleColumns("vlanId", "networkInterface", "v4Address", "v6Address");
		vlanTable.setColumnCollapsingAllowed(true);
		fieldGroup.bind(vlanTable, "ownNetworks");
		mainLayout.addComponent(vlanTable);

		provisionButton = new Button("provision");
		provisionButton.addClickListener(new ClickListener() {

			@Override
			public void buttonClick(final ClickEvent event) {
				final NetworkDevice networkDevice = currentNetworkDevice;
				if (networkDevice != null) {
					networkDeviceManagementService.loadConfig(networkDevice.getV4Address(), networkDevice.getV6Address());
				}
			}
		});
		final VerticalLayout actionButtonsLayout = new VerticalLayout(provisionButton);
		actionButtonsLayout.setCaption("Actions");
		mainLayout.addComponent(actionButtonsLayout);
		setCompositionRoot(mainLayout);
		mainLayout.setVisible(false);
	}

	@Override
	public void setItem(final CrudItem<Station> item) {
		fieldGroup.setItemDataSource(item);
		devicesContainer.removeAllFilters();
		final Long stationId = item.getPojo().getId();
		final Set<NetworkDeviceModel> stationModels = new HashSet<NetworkDeviceModel>(Arrays.asList(NetworkDeviceModel.stationModels));
		devicesContainer.addFilter(new PojoFilter<NetworkDevice>() {

			@Override
			public boolean accept(final NetworkDevice candidate) {
				if (!stationModels.contains(candidate.getDeviceModel())) {
					return false;
				}
				return candidate.getStation() == null || candidate.getStation().getId().equals(stationId);
			}
		});
		currentNetworkDevice = item.getPojo().getDevice();
		provisionButton.setEnabled(currentNetworkDevice != null);
		mainLayout.setVisible(true);
	}

}
